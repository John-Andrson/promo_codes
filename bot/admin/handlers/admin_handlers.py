from aiogram import types, Dispatcher
from bot.admin.keyboards.admin_keyboards import get_menu_admin_kb, get_all_users_kb, get_cancel_sending_kb
from bot.admin.keyboards.admin_keyboards import get_start_sending_kb, get_user_menu_kb
from bot.client.keyboards.user_keyboards import get_main_menu_kb
from bot.utilities.data_base import DatabaseManager
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery
import asyncio
from aiogram import exceptions
from dotenv import load_dotenv
import os


# –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ DatabaseManager
db_manager = DatabaseManager()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è
class Waiting(StatesGroup):
    input_id_users = State()
    input_msg_text = State()
    input_cmd_send = State()


load_dotenv('.env')
admin_id = os.getenv("admin_id")


# –≤—Ö–æ–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
async def cmd_admin(msg: types.Message):
    if int(msg.from_user.id) == int(admin_id):
        await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=get_menu_admin_kb())
    else:
        await msg.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=get_user_menu_kb())


# –≤—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
async def sending_menu(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
                              reply_markup=get_all_users_kb())
    await Waiting.input_id_users.set()


# id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
async def send_all(msg: types.Message, state: FSMContext):
    results = db_manager.search_user_ids()
    ids = [user_id[0] for user_id in results]
    async with state.proxy() as data:
        data['ids'] = ids
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=get_cancel_sending_kb())
    await Waiting.input_msg_text.set()


# –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def input_ids(msg: types.Message, state: FSMContext):
    parts = [part.strip() for part in msg.text.split(',')]
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    for part in parts:
        if not part.isdigit():
            # –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —á–∞—Å—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
            await msg.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ ID."
                             "–ï—Å–ª–∏ —É –≤–∞—Å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ ID, —Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Ö –∑–∞–ø—è—Ç–æ–π")
            return
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    ids = [int(part) for part in parts]
    async with state.proxy() as data:
        data['ids'] = ids
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=get_cancel_sending_kb())
    await Waiting.input_msg_text.set()


# –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def input_text(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['s_text'] = msg.text
    await msg.answer("–í—Å–µ –≥–æ—Ç–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É</b>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                     parse_mode="html",
                     reply_markup=get_start_sending_kb())
    await Waiting.input_cmd_send.set()


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def start_sending_msg(msg: types.Message, state: FSMContext):
    import main
    await msg.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.", reply_markup=get_menu_admin_kb())
    async with state.proxy() as data:
        ids = data['ids']
        s_text = data['s_text']

    for item in ids:
        try:
            await main.bot.send_message(chat_id=item, text=s_text)
            await asyncio.sleep(1)
        except exceptions.ChatNotFound as chat_not_found_error:
            error = f"–û—à–∏–±–∫–∞: –ß–∞—Ç {item} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
            await main.bot.send_message(chat_id=admin_id, text=error)

    await state.finish()


# –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
async def back_in__menu_admin(msg: types.Message, state: FSMContext):
    await state.finish()
    if int(msg.from_user.id) == int(admin_id):
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_menu_admin_kb())
    else:
        await msg.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=get_main_menu_kb())


# –≤—ã–≥—Ä—É–∑–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def save_id(call: CallbackQuery):
    await call.message.delete()
    import main

    results = db_manager.search_user_ids()
    with open('id_users.txt', 'w') as file:
        for item in results:
            file.write(str(item[0]) + '\n')
    await main.bot.send_document(chat_id=admin_id, document=open('id_users.txt', 'rb'),
                                 reply_markup=get_main_menu_kb())
    await call.message.answer("‚òùÔ∏è‚òùÔ∏è‚òùÔ∏è‚òùÔ∏è‚òùÔ∏è", reply_markup=get_menu_admin_kb())


# –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
async def close_menu_admin(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer("–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin.\n"
                              "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤.",
                              reply_markup=get_user_menu_kb())


def register_admin_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(cmd_admin, commands=['admin'])
    dp.register_callback_query_handler(close_menu_admin, lambda call: call.data == "close")
    dp.register_callback_query_handler(sending_menu, lambda call: call.data == "sending")
    dp.register_message_handler(back_in__menu_admin, text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                                state=[Waiting.input_id_users, Waiting.input_msg_text, Waiting.input_cmd_send])
    dp.register_message_handler(send_all, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", state=Waiting.input_id_users)
    dp.register_message_handler(input_ids, state=Waiting.input_id_users)
    dp.register_message_handler(input_text, state=Waiting.input_msg_text)
    dp.register_message_handler(start_sending_msg, text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", state=Waiting.input_cmd_send)
    dp.register_callback_query_handler(save_id, lambda call: call.data == "download")
