from aiogram import types, Dispatcher
from bot.client.keyboards.user_keyboards import get_section_kb, get_store_kb, get_main_menu_kb
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from bot.utilities.data_base import DatabaseManager
from aiogram.types import ReplyKeyboardRemove


# –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ DatabaseManager
db_manager = DatabaseManager()


async def cmd_start(msg: types.Message) -> None:
    db_manager.add_users(msg.from_user.id, msg.from_user.first_name, f"@{msg.from_user.username}")
    result = db_manager.search_banner_id("Default")
    import main

    des_text = "–ü—Ä–∏–≤–µ—Ç, —è - <b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞</b>!\n" \
               "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –µ—â–µ –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω—ã–º–∏. " \
               "–ß—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—É—á—à–µ —á–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ, –Ω–µ —Ç–∞–∫ –ª–∏?\n" \
               "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–º–æ–∫–æ–¥, –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"

    await main.bot.send_photo(msg.chat.id, photo=result[0], caption=des_text, parse_mode="html",
                              reply_markup=get_section_kb())


async def search_promo(msg: types.Message) -> None:
    import main
    new_caption = "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–º–æ–∫–æ–¥, –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    result = db_manager.search_banner_id("Default")
    await main.bot.send_photo(msg.chat.id, photo=result[0], caption=new_caption, reply_markup=get_section_kb())


async def back_to_section(msg: types.Message, state: FSMContext) -> None:
    await msg.answer("–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –º–∞–≥–∞–∑–∏–Ω:", reply_markup=ReplyKeyboardRemove())
    import main
    async with state.proxy() as data:
        section = data['section']
    result = db_manager.search_banner_id(section)
    await main.bot.send_photo(msg.chat.id, result[0], reply_markup=get_store_kb(section))


async def enter_to_section(call: CallbackQuery, state: FSMContext):
    data = call.data.split("_")
    section = data[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    async with state.proxy() as data:
        data['section'] = section

    result = db_manager.search_banner_id(section)
    new_caption = "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –º–∞–≥–∞–∑–∏–Ω:"
    await call.message.edit_media(types.InputMedia(media=result[0], caption=new_caption),
                                  reply_markup=get_store_kb(section))


async def enter_to_store(call: CallbackQuery):
    import main
    data = call.data.split("_")
    store = data[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
    results = db_manager.get_codes(store)
    result = db_manager.search_banner_id(store)
    await call.message.edit_media(types.InputMedia(media=result[0], caption="–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –¥–ª—è —Ç–µ–±—è:"))
    for elem in results:
        m_text = f"–ü—Ä–æ–º–æ–∫–æ–¥: <b>{elem[0]}</b>\n" \
                 f"<em>{elem[1]}</em>\n" \
                 f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: <b>{elem[2]}</b>"
        await main.bot.send_message(call.message.chat.id, m_text, parse_mode="html", reply_markup=get_main_menu_kb())


async def back_to_main(call: CallbackQuery):
    new_caption = "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–º–æ–∫–æ–¥, –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    result = db_manager.search_banner_id("Default")
    await call.message.edit_media(types.InputMedia(media=result[0], caption=new_caption), reply_markup=get_section_kb())


def register_user_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(search_promo, text="–í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª")
    dp.register_message_handler(back_to_section, text="üîô –í—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω")
    dp.register_callback_query_handler(enter_to_section, lambda call: call.data.startswith("section_"))
    dp.register_callback_query_handler(enter_to_store, lambda call: call.data.startswith("store_"))
    dp.register_callback_query_handler(back_to_main, lambda call: call.data == "back_section")
